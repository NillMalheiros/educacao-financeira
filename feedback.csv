# app.py (ou o nome do seu arquivo principal)

from flask import Flask, render_template, request, escape
import os
# A biblioteca 'gunicorn' n√£o precisa ser importada aqui, 
# mas deve estar no seu arquivo requirements.txt

app = Flask(__name__)

# √â uma boa pr√°tica definir uma chave secreta, especialmente para produ√ß√£o.
# O Render permite configurar isso como uma vari√°vel de ambiente.
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', os.urandom(24))

# ------------------------
# üíå Armazenamento de Feedbacks
# ------------------------
# IMPORTANTE PARA O DEPLOY:
# A lista em mem√≥ria foi removida. Em um ambiente de produ√ß√£o como o Render,
# os dados em mem√≥ria s√£o perdidos a cada reinicializa√ß√£o do servidor.
# Para uma aplica√ß√£o real, voc√™ deveria usar um banco de dados (como o PostgreSQL gratuito do Render)
# ou um servi√ßo de armazenamento de arquivos.
#
# Para este exemplo, vamos manter a funcionalidade de feedback, mas com a ressalva
# de que os dados n√£o ser√£o persistentes. A rota /painel foi removida para evitar confus√£o.
# ------------------------

# (Vari√°vel mantida apenas para o c√≥digo n√£o quebrar, mas n√£o √© uma solu√ß√£o de produ√ß√£o)
feedbacks_recebidos = [] 

# ------------------------
# üåê Rotas de Navega√ß√£o
# ------------------------

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/sobre')
def sobre():
    return render_template('sobre.html')

@app.route('/blog')
def blog():
    return render_template('blog.html')

@app.route('/avaliacao')
def avaliacao():
    return render_template('avaliacao.html')

# ------------------------
# üí∞ Simulador de Or√ßamento
# ------------------------

@app.route('/simulador', methods=['GET', 'POST'])
def simulador():
    resultado = None
    classe = "resultado-neutro"
    if request.method == 'POST':
        try:
            receita = float(request.form.get('receita', '0'))
            despesas = float(request.form.get('despesas', '0'))
            # Presume-se que a fun√ß√£o simulador_orcamento existe em funcoes_financeiras.py
            from funcoes_financeiras import simulador_orcamento
            resultado, classe = simulador_orcamento(receita, despesas)
        except ValueError:
            resultado = "Dados inv√°lidos. Por favor, insira apenas n√∫meros."
            classe = "resultado-negativo"
        except Exception as e:
            print(f"Erro no simulador: {e}") # Log do erro no console do Render
            resultado = "Ocorreu um erro inesperado. Tente novamente."
            classe = "resultado-negativo"
    return render_template('simulador.html', resultado=resultado, classe=classe)

# ------------------------
# üß† Quiz Financeiro
# ------------------------

@app.route('/quiz', methods=['GET', 'POST'])
def quiz():
    acertos = None
    mensagem = ""
    classe = ""
    if request.method == 'POST':
        try:
            respostas = {
                'p1': request.form.get('p1', '').strip().lower(),
                'p2': request.form.get('p2', '').strip().lower(),
                'p3': request.form.get('p3', '').strip().lower(),
            }
            # Presume-se que a fun√ß√£o calcular_acertos_quiz existe em funcoes_financeiras.py
            from funcoes_financeiras import calcular_acertos_quiz
            acertos = calcular_acertos_quiz(respostas)

            if acertos == 3:
                mensagem = "Show! Voc√™ domina o assunto! üéâ"
                classe = "resultado-positivo"
            elif acertos == 2:
                mensagem = "Muito bem! Falta pouco pra dominar üí™"
                classe = "resultado-neutro"
            else:
                mensagem = "Sem stress! Vamos melhorar juntas! üå±"
                classe = "resultado-negativo"
        except Exception as e:
            print(f"Erro no quiz: {e}") # Log do erro
            mensagem = "Ocorreu um erro ao processar o quiz."
            classe = "resultado-negativo"
    return render_template('quiz.html', acertos=acertos, mensagem=mensagem, classe=classe)

# ------------------------
# üì¨ Feedback dos Usu√°rios
# ------------------------

@app.route('/feedback', methods=['GET', 'POST'])
def feedback():
    resposta = None
    if request.method == 'POST':
        try:
            # Usar escape para seguran√ßa contra ataques XSS
            nome = escape(request.form.get('nome', 'An√¥nimo').strip())
            tipo = escape(request.form.get('tipo', 'N√£o informado'))
            mensagem = escape(request.form.get('mensagem', '').strip())

            if not mensagem:
                resposta = "Por favor, escreva uma mensagem v√°lida."
            else:
                # AVISO: Este feedback ser√° perdido na pr√≥xima reinicializa√ß√£o do servidor.
                feedbacks_recebidos.append({'nome': nome or 'An√¥nimo', 'tipo': tipo, 'mensagem': mensagem})
                resposta = "Obrigada pelo seu feedback! üíå"
                # O print() aparecer√° nos logs do Render, o que √© √≥timo para depura√ß√£o.
                print(f"‚úÖ Feedback recebido: {nome}, {tipo}, {mensagem}")
        except Exception as e:
            print(f"Erro no feedback: {e}")
            resposta = "Ocorreu um erro ao salvar seu feedback."
    return render_template('feedback.html', resposta=resposta)

# ------------------------
# üöÄ Inicializa√ß√£o do Servidor (REMOVIDO PARA PRODU√á√ÉO)
# ------------------------
# A se√ß√£o abaixo √© usada apenas para desenvolvimento local.
# O Render usar√° o Gunicorn para iniciar a aplica√ß√£o, ent√£o este bloco n√£o ser√° executado l√°.
if __name__ == '__main__':
    # Use uma porta diferente de 5000 se ela estiver em uso no seu sistema
    port = int(os.environ.get('PORT', 5001)) 
    # debug=True √© √≥timo para desenvolver, mas NUNCA deve ser usado em produ√ß√£o.
    app.run(debug=True, host='0.0.0.0', port=port)
